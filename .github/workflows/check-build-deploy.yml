on:
  workflow_call:
    inputs:
      package:
        required: true
        type: string
      package_cap:
        required: true
        type: string
    secrets:
      PROD_CLOUD_SSH_URI:
        required: true
      PROD_CLOUD_SSH_HOST:
        required: true
      PROD_CLOUD_SSH_PORT:
        required: true
      PROD_CLOUD_SSH_KEY:
        required: true
      PROD_CLOUD_PROJECT_ROOT:
        required: true
      PROD_ASSETS_REPO_PAT:
      PROD_HOME_DOCKER_RUN_CMD_EXTRA:
      PROD_ADMIN_DOCKER_RUN_CMD_EXTRA:

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install
      - name: Run ESLint
        run: 'pnpm run lint:${{ inputs.package }}'
      - name: Check types
        # vue-tsc always runs at the workspace root
        run: pnpm run typecheck

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Checkout assets
        uses: actions/checkout@v4
        with:
          repository: ThrRip/mzg.fan-assets
          token: ${{ secrets.PROD_ASSETS_REPO_PAT }}
          path: mzg.fan-assets
      - name: Copy the assets out
        run: cp -r mzg.fan-assets/* .
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm -F ${{ inputs.package }} install
      - name: Build standalone server
        run: 'pnpm run build:${{ inputs.package }}'
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get the current date and time
        id: date
        run: node -e 'console.log(`date=${new Date().toISOString()}`)' >> $GITHUB_OUTPUT
      - name: Build and push the Docker image
        id: build-docker
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile
          context: packages/${{ inputs.package }}
          tags: ${{ vars.PROD_DOCKER_IMAGE_TAG_PREFIX }}-${{ inputs.package }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
          push: true
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ vars.PROD_DOCKER_IMAGE_TAG_PREFIX }}-${{ inputs.package }}
          subject-digest: ${{ steps.build-docker.outputs.digest }}
          push-to-registry: true

  deploy-prod:
    name: Deploy to production
    if: github.repository == 'ThrRip/mzg.fan' && github.ref == 'refs/heads/main'
    needs: [check, build]
    concurrency: deploy-prod-${{ github.ref }}-${{ inputs.package }}
    runs-on: ubuntu-latest
    env:
      MASKING_PROD_CLOUD_SSH_HOST: ${{ secrets.PROD_CLOUD_SSH_HOST }}
    steps:
      - name: Retrieve the SSH key
        run: |
          mkdir ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.PROD_CLOUD_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
      - name: Replace the container
        run: |
          ssh \
            -i ~/.ssh/id_ed25519 \
            -o StrictHostKeyChecking=no \
            -p ${{ secrets.PROD_CLOUD_SSH_PORT }} \
            ${{ secrets.PROD_CLOUD_SSH_URI }} <<'END'
          set -e
          sudo docker pull ${{ vars.PROD_DOCKER_IMAGE_TAG_PREFIX }}-${{ inputs.package }}
          [ "$(sudo docker ps -qf name=mzg-fan-${{ inputs.package }})" ] && sudo docker stop mzg-fan-${{ inputs.package }}
          [ "$(sudo docker ps -qaf name=mzg-fan-${{ inputs.package }})" ] && sudo docker rm mzg-fan-${{ inputs.package }}
          sudo docker run \
            --name mzg-fan-${{ inputs.package }} --init -d \
            ${{ secrets[format('PROD_{0}_DOCKER_RUN_CMD_EXTRA', inputs.package_cap)] }} \
            ${{ vars.PROD_DOCKER_IMAGE_TAG_PREFIX }}-${{ inputs.package }}
          END
